enum BarberState {free, busy}

type BarberShop {
	BarberState barberState = BarberState.free
	int queueLength = 0
}

resource barberShop = BarberShop.create(BarberState.free, 0)

sequence clientInputInterval = new Values(#[14, 13, 17, 15, 16, 15, 14, 22, 19])

event ClientInput() {
	ClientInput.plan(currentTime + clientInputInterval.next())
	if (barberShop.barberState == BarberState.free) {
		barberShop.barberState = BarberState.busy
		ServiceFinished.plan(currentTime + serviceDuration.next())
	} else {
		barberShop.queueLength = barberShop.queueLength + 1
	}
}

sequence serviceDuration = new Values(#[18, 12, 14, 15, 14, 15, 13, 14, 17])

event ServiceFinished() {
	if (barberShop.queueLength > 0) {
		barberShop.queueLength = barberShop.queueLength - 1
		ServiceFinished.plan(currentTime + serviceDuration.next())
	} else {
		barberShop.barberState = BarberState.free
	}
}

def init() {
	ClientInput.plan(clientInputInterval.next())
}

def terminateCondition() {
	return currentTime > 44
}
