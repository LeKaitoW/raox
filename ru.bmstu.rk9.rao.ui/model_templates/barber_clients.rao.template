enum Тип_клиента {Тип1, Тип2}
enum Состояние_клиента {Пришел, Начал_стрижку}
enum Состояние_парикмахера {Свободен, Занят}

type Парикмахерские {
	int количество_в_очереди
}

type Клиенты {
	Тип_клиента тип
	Состояние_клиента состояние
}

type Парикмахеры {
	Состояние_парикмахера состояние_парикмахера = Состояние_парикмахера.Свободен
	int количество_обслуженных
	int длительность_min
	int длительность_max
	Тип_клиента тип_клиента
}

resource парикмахерская = Парикмахерские.create(0)
resource парикмахер_1 = Парикмахеры.create(Состояние_парикмахера.Свободен, 0, 20, 40, Тип_клиента.Тип1)
resource парикмахер_2 = Парикмахеры.create(Состояние_парикмахера.Свободен, 0, 25, 70, Тип_клиента.Тип2)
resource парикмахер_3 = Парикмахеры.create(Состояние_парикмахера.Свободен, 0, 30, 60, Тип_клиента.Тип2)

event Приход_клиента() {
	Клиенты.create(случайный_тип_клиента.next(), Состояние_клиента.Пришел)
	Приход_клиента.plan(currentTime + интервал_прихода.next())
	парикмахерская.количество_в_очереди = парикмахерская.количество_в_очереди + 1
}

operation Обслуживание_клиента() {
	relevant парикмахерская_ = парикмахерская.onlyif[количество_в_очереди > 0]
	relevant клиент_ = Клиенты.accessible.filter[состояние == Состояние_клиента.Пришел].any
	relevant парикмахер_ = Парикмахеры.accessible.filter [
		состояние_парикмахера == Состояние_парикмахера.Свободен && тип_клиента == клиент_.тип
	].minBySafe[количество_обслуженных]

	def begin() {
		парикмахерская_.количество_в_очереди = парикмахерская_.количество_в_очереди - 1
		клиент_.состояние = Состояние_клиента.Начал_стрижку
		парикмахер_.состояние_парикмахера = Состояние_парикмахера.Занят
	}

	def duration() {
		return длительность_обслуживания.next(парикмахер_.длительность_min, парикмахер_.длительность_max)
	}

	def end() {
		парикмахер_.состояние_парикмахера = Состояние_парикмахера.Свободен
		парикмахер_.количество_обслуженных = парикмахер_.количество_обслуженных + 1
		клиент_.erase()
	}
}

logic Model {
	activity обслуживание_клиента = new Activity(Обслуживание_клиента.create())
}

sequence интервал_прихода = new Exponential(123456789, 1 / 30.0)
sequence длительность_обслуживания = new Uniform(123456789)
sequence случайный_тип_клиента = new DiscreteHistogram<Тип_клиента>(
	123456789,
	#[
		Тип_клиента.Тип1 -> 1.0,
		Тип_клиента.Тип2 -> 5.0
	]
)

def init() {
	Приход_клиента.plan(currentTime + интервал_прихода.next())
}

def terminateCondition() {
	return currentTime >= 7 * 12 * 60
}

result занятость_парикмахера_1 = Result.create([парикмахер_1.состояние_парикмахера])
result занятость_парикмахера_2 = Result.create([парикмахер_2.состояние_парикмахера])
result занятость_парикмахера_3 = Result.create([парикмахер_3.состояние_парикмахера])
result обслужено_парикмахером_1 = Result.create([парикмахер_1.количество_обслуженных], new LastValueStatistics())
result обслужено_парикмахером_2 = Result.create([парикмахер_2.количество_обслуженных], new LastValueStatistics())
result обслужено_парикмахером_3 = Result.create([парикмахер_3.количество_обслуженных], new LastValueStatistics())
