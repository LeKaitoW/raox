enum Состояние_парикмахера {Свободен, Занят}

type Парикмахерские {
	Состояние_парикмахера состояние_парикмахера
	int количество_в_очереди
	int количество_обслуженных
}

resource парикмахерская = Парикмахерские.create(Состояние_парикмахера.Свободен, 0, 0)

event Приход_клиента() {
	Приход_клиента.plan(currentTime + интервал_прихода.next())
	парикмахерская.количество_в_очереди = парикмахерская.количество_в_очереди + 1
}

operation Обслуживание_клиента() {
	relevant парикмахерская_ = парикмахерская.onlyif [
		состояние_парикмахера == Состояние_парикмахера.Свободен && количество_в_очереди > 0
	]

	def begin() {
		парикмахерская_.количество_в_очереди = парикмахерская_.количество_в_очереди - 1
		парикмахерская_.состояние_парикмахера = Состояние_парикмахера.Занят
	}
	def duration() {
		return длительность_обслуживания.next()
	}
	def end() {
		парикмахерская_.состояние_парикмахера = Состояние_парикмахера.Свободен
		парикмахерская_.количество_обслуженных = парикмахерская_.количество_обслуженных + 1
	}
}

logic Model {
	activity обслуживание_клиента = new Activity(Обслуживание_клиента.create())
}

sequence интервал_прихода = new Exponential(123456789, 1 / 30.0)
sequence длительность_обслуживания = new Uniform(123456789, 20, 40)

def init() {
	Приход_клиента.plan(currentTime + интервал_прихода.next())
}

def terminateCondition() {
	return currentTime >= 7 * 12 * 60
}

result занятость_парикмахера = Result.create([парикмахерская.состояние_парикмахера])
result длина_очереди = Result.create([парикмахерская.количество_в_очереди])
result всего_обслужено = Result.create([парикмахерская.количество_обслуженных], new LastValueStatistics())
result пропускная_способность = Result.create([парикмахерская.количество_обслуженных / currentTime * 60])
result длительность_работы = Result.create([currentTime / 60], new LastValueStatistics())
