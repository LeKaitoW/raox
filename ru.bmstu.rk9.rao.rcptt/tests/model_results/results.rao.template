enum Client_type {Male, Female}
enum Client_state {In_queue, Barbering}
enum Barber_state {Vacant, Busy}

type Barbershop {
	int queue_length
}

type Client {
	Client_type client_type
	Client_state state
}

type Barber {
	Barber_state barber_state = Barber_state.Vacant
	int serviced
	int time_min
	int time_max
	Client_type client_type
	double last_service_duration = 0
}

resource barbershop = Barbershop.create(0)
resource barber_1 = Barber.create(Barber_state.Vacant, 0, 20, 40, Client_type.Male, 0)
resource barber_2 = Barber.create(Barber_state.Vacant, 0, 25, 70, Client_type.Female, 0)
resource barber_3 = Barber.create(Barber_state.Vacant, 0, 30, 60, Client_type.Female, 0)

event Client_income() {
	Client.create(random_client_type.next(), Client_state.In_queue)
	Client_income.plan(currentTime + arrival_interval.next())
	barbershop.queue_length = barbershop.queue_length + 1
}

operation Servicing() {
	relevant barbershop_ = barbershop.onlyif[queue_length > 0]
	relevant client_ = Client.accessible.filter[state == Client_state.In_queue].any
	relevant barber_ = Barber.accessible.filter [
		barber_state == Barber_state.Vacant && client_type == client_.client_type
	].minBySafe[serviced]

	def begin() {
		barbershop.queue_length = barbershop.queue_length - 1
		client_.state = Client_state.Barbering
		barber_.barber_state = Barber_state.Busy
		categorical_manual.update(client_.client_type)
	}

	def duration() {
		var duration = servicing_interval.next(barber_.time_min, barber_.time_max)
		
		barber_.last_service_duration = duration
		num_atr_storeless_manual.update()
		storeless_manual.update(duration)
		
		return duration
	}

	def end() {
		barber_.barber_state = Barber_state.Vacant
		barber_.serviced = barber_.serviced + 1
		client_.erase()
	}
}

logic Model {
	activity servicing = new Activity(Servicing.create())
}

sequence arrival_interval = new Exponential(123456789, 1 / 30.0)
sequence servicing_interval = new Uniform(123456789)
sequence random_client_type = new DiscreteHistogram<Client_type>(
	123456789,
	#[
		Client_type.Male -> 1.0,
		Client_type.Female -> 5.0
	]
)

def init() {
	Client_income.plan(currentTime + arrival_interval.next())
}

def terminateCondition() {
	return currentTime >= 7 * 12 * 60
}

dataSource barbershop_queue_length<Integer>() {
    def evaluate() {
        return barbershop.queue_length
    }
}

dataSource barber_serviced<Integer>(Barber barber, Double timeStart, Double timeEnd) {
    def evaluate() {
        return barber.serviced
    }
    
    def condition() {
        return timeStart <= currentTime && currentTime <= timeEnd
    }
}

result numeric_atr_default_stats = Result.create([barbershop.queue_length])
result numeric_atr_weight_stats = Result.create([barbershop.queue_length], new WeightedStorelessNumericStatistics())
result numeric_atr_weight_stats_auto = Result.create([barbershop.queue_length], ResultMode.AUTO, new WeightedStorelessNumericStatistics())

result numeric_datasource_default_stats = Result.create(new barbershop_queue_length())
result numeric_datasource_weight_stats = Result.create(new barbershop_queue_length(), new WeightedStorelessNumericStatistics())
result numeric_datasource_weight_stats_auto = Result.create(new barbershop_queue_length(), ResultMode.AUTO, new WeightedStorelessNumericStatistics())

result numeric_calc_default_stats_auto = Result.create([(barber_1.serviced + barber_2.serviced + barber_3.serviced) / currentTime * 60], ResultMode.AUTO)

result num_atr_storeless_manual = Result.create([barber_2.last_service_duration], ResultMode.MANUAL, new StorelessNumericStatistics())
result storeless_manual = Result.create(new StorelessNumericStatistics())

result barber_serviced_100_5000 = Result.create(new barber_serviced(barber_1, 100.0, 5000.0))

result cat_atr_default_stats = Result.create([barber_1.barber_state])
result cat_atr_weight_stats = Result.create([barber_1.barber_state], new CategoricalStatistics())

result categorical_manual = Result.create(new CategoricalStatistics<Client_type>())

result last_value_enum = Result.create([barber_2.barber_state], new LastValueStatistics())
result last_value_num = Result.create([(barber_1.serviced + barber_2.serviced + barber_3.serviced)], new LastValueStatistics())
